function loadDeckPricer(){console.log("load deck pricer"),window.location.hash="/deckPricer",clearScreen(),subContentDeckPricer.innerHTML=`\n  <h2>${deckPricer_chooseDeck}</h2> \n  <input type="file" id="file-input" class="form-control-file" />\n  <pre id="contenido-archivo"></pre>\n\n  <h3>${deckPricer_dropkYdk}</h3>\n  <div id="deck">\n    <div id="deck_creator"></div>\n    <hr>\n    <h2>Main Deck </h2>\n    <div id="deck_main"></div>\n    <hr>\n    <h2>Extra Deck </h2>\n    <div id="deck_extra"></div>\n    <hr>\n    <h2>Side Deck </h2>\n    <div id="deck_side"></div>\n  </div>\n  <button type="button" class="btn btn-secondary btn-lg btn-block blackButton" onclick="searchLowestPrices()" >Price Breakdown</button>\n  <br>\n  <br>\n  <div id="deck_info">\n\n  </div>\n\n\n  `;let e=document.getElementById("sub-content-deckPricer");e.addEventListener("dragover",e=>e.preventDefault()),e.addEventListener("drop",readFile),document.getElementById("file-input").addEventListener("change",leerArchivo,!1)}function searchLowestPrices(){deckInfo=document.getElementById("deck_info"),deckInfo.innerHTML='  \n  <table class="table table-hover">\n    <thead>\n      <tr>\n        <th scope="col">Card</th>\n        <th scope="col">Rarity</th>\n        <th scope="col">Set Code</th>\n        <th scope="col">Lowest Price</th>\n      </tr>\n    </thead>\n    <tbody id=\'deckInfo_table\'>\n  </tbody> ',deckInfo_table=document.getElementById("deckInfo_table"),deckInfo_table.innerHTML+="\n  <tr>\n    <td>MAIN DECK</td>\n    <td></td>\n    <td></td>\n    <td></td>\n  </tr>\n  \n   ",searchLowestDeckValue(deck.mainDeck),deckInfo_table.innerHTML+="\n  <tr>\n    <td>EXTRA DECK</td>\n    <td></td>\n    <td></td>\n    <td></td>\n  </tr>\n   ",searchLowestDeckValue(deck.extraDeck),deckInfo_table.innerHTML+="\n  <tr>\n    <td>SIDE DECK</td>\n    <td></td>\n    <td></td>\n    <td></td>\n  </tr>\n   ",searchLowestDeckValue(deck.sideDeck);let e=lowestPriceForDeck.mainDeck.reduce((e,t)=>e+t,0),t=lowestPriceForDeck.extraDeck.reduce((e,t)=>e+t,0),c=lowestPriceForDeck.sideDeck.reduce((e,t)=>e+t,0),d=e+t+c;deckInfo_table.innerHTML+="\n  <tr>\n    <td></td>\n    <td></td>\n    <td></td>\n    <td></td>\n  </tr>\n   ",deckInfo_table.innerHTML+=`\n   <tr>\n     <td>Total price for Main Deck : </td>\n     <td></td>\n     <td></td>\n     <td>$${e.toFixed(2)}</td>\n   </tr>\n    `,deckInfo_table.innerHTML+=`\n   <tr>\n     <td>Total price for Extra Deck : </td>\n     <td></td>\n     <td></td>\n     <td>$${t.toFixed(2)}</td>\n   </tr>\n    `,deckInfo_table.innerHTML+=`\n    <tr>\n      <td>Total price for Side Deck : </td>\n      <td></td>\n      <td></td>\n      <td>$${c.toFixed(2)}</td>\n    </tr>\n     `,deckInfo_table.innerHTML+=`\n     <tr>\n       <td>Total price for Deck : </td>\n       <td></td>\n       <td></td>\n       <td>$${d}</td>\n     </tr>\n      `}function leerArchivo(e){clearDeck();var t=e.target.files[0];if(t){var c=new FileReader;c.onload=function(e){var t=e.target.result;mostrarContenido(t)},c.readAsText(t)}}function mostrarContenido(e){textFromFile=e,createDeckArray();document.getElementById("deck_info"),document.getElementById("deck");var t=document.getElementById("deck_creator");document.getElementById("deck_main"),document.getElementById("deck_extra"),document.getElementById("deck_side");let c,d,r;if(null==deck.mainDeck[0])console.log("No main deck"),c=0;else if(null==deck.extraDeck[0])console.log("No extra deck"),d=0;else if(null==deck.sideDeck[0])console.log("No side deck"),r=0;else{c=deck.mainDeck.length,d=deck.extraDeck.length,r=deck.sideDeck.length,t.innerHTML=`\n            ${deckPricer_deckCreator} : ${rawDeck.creator}\n            ${deckPricer_mainDeck} (${c})\n            ${deckPricer_extraDeck} (${d})\n            ${deckPricer_sideDeck} (${r})\n              `;document.getElementById("cardPrices")}mainDeckDuplicates=count_duplicate(deck.mainDeck),extraDeckDuplicates=count_duplicate(deck.extraDeck),sideDeckDuplicates=count_duplicate(deck.sideDeck),getCardsById(rawDeck.mainDeck,"deck","deck","mainDeck"),getCardsById(rawDeck.extraDeck,"extra","extra","extraDeck"),getCardsById(rawDeck.sideDeck,"side","side","sideDeck")}function createDeckArray(){textFromFile=textFromFile.replace("#created by ","#creator:"),textFromFile=textFromFile.replace("#main","#main:"),textFromFile=textFromFile.replace("#extra","#extra:"),textFromFile=textFromFile.replace("!","#"),textFromFile=textFromFile.replace(" ",""),textFromFile=textFromFile.replace("#side","#side:");var e=textFromFile.split("#creator:"),t=e[1].split("#main:"),c=t[1].split("#extra:"),d=c[1].split("#side:");deck.creator=t[0].replace(/\r\n/g,""),rawDeck.creator=t[0].replace(/\r\n/g,""),deck.mainDeck=c[0].trimStart().trimRight().replace(/\r\n/g,","),rawDeck.mainDeck=deck.mainDeck,deck.mainDeck=deck.mainDeck.split(","),deck.extraDeck=d[0].trimStart().trimRight().replace(/\r\n/g,","),rawDeck.extraDeck=deck.extraDeck,deck.extraDeck=deck.extraDeck.split(","),deck.sideDeck=d[1].trimStart().trimRight().replace(/\r\n/g,","),rawDeck.sideDeck=deck.sideDeck,deck.sideDeck=deck.sideDeck.split(",")}function getCardsById(e,t,c,d){resetMoreResults(),deck={mainDeck:[],extraDeck:[],sideDeck:[]},"deck"==c&&(c=mainDeckDuplicates),"extra"==c&&(c=extraDeckDuplicates),"side"==c&&(c=sideDeckDuplicates),async function(){await fetch("https://db.ygoprodeck.com/api/v7/cardinfo.php?id="+e+"&misc=yes").then(e=>e.json()).then(e=>{results=e,results.data.sort(sortBy);for(var r=0;r<results.data.length;r++){createDeck(results.data[r],t),pushToDeck(d,r);for(var a=1;a<c[results.data[r].id];a++)createDeckDuplicate(results.data[r],t),pushToDeck(d,r)}})}(),deck.mainDeck.sort(sortBy),deck.extraDeck.sort(sortBy),deck.sideDeck.sort(sortBy)}function readFile(e){e.preventDefault(),clearDeck();let t=e.dataTransfer.files[0];var c=new FileReader;c.onload=function(e){var t=e.target.result;mostrarContenido(t)},c.readAsText(t)}function clearDeck(){document.getElementById("deck_info"),document.getElementById("deck");var e=document.getElementById("deck_creator"),t=document.getElementById("deck_main"),c=document.getElementById("deck_extra"),d=document.getElementById("deck_side");e.innerHTML="",t.innerHTML="",c.innerHTML="",d.innerHTML=""}function count_duplicate(e){let t={};for(let c=0;c<e.length;c++)t[e[c]]?t[e[c]]+=1:t[e[c]]=1;for(let e in t)t[e];return t}function pushToDeck(e,t){"mainDeck"==e?deck.mainDeck.push(results.data[t]):"extraDeck"==e?deck.extraDeck.push(results.data[t]):"sideDeck"==e&&deck.sideDeck.push(results.data[t])}function searchLowestDeckValue(e){if(deckInfo=document.getElementById("deck_info"),deckInfo_table=document.getElementById("deckInfo_table"),e==deck.mainDeck)for(let e=0;e<deck.mainDeck.length;e++){lowestCardPriceRaw={name:[],rarity:[],price:[],set:[],setcode:[],id:[]};for(let t=0;t<deck.mainDeck[e].card_sets.length;t++)0!=deck.mainDeck[e].card_sets[t].set_price&&(lowestCardPriceRaw.name.push(deck.mainDeck[e].name),lowestCardPriceRaw.rarity.push(deck.mainDeck[e].card_sets[t].set_rarity),lowestCardPriceRaw.price.push(Number.parseFloat(deck.mainDeck[e].card_sets[t].set_price)),lowestCardPriceRaw.set.push(deck.mainDeck[e].card_sets[t].set_name),lowestCardPriceRaw.setcode.push(deck.mainDeck[e].card_sets[t].set_code),lowestCardPriceRaw.id.push(deck.mainDeck[e].id));deckInfo_table.innerHTML+=`\n            <tr>\n              <td data-toggle="modal" data-target="#ModalID${deck.mainDeck[e].id}">${deck.mainDeck[e].name}</td>\n              <td>rarity</td>\n              <td>setcode</td>\n              <td>$${Math.min(...lowestCardPriceRaw.price)}</td>\n            </tr>\n            \n             `,lowestPriceForDeck.mainDeck.push(Math.min(...lowestCardPriceRaw.price))}else if(e==deck.extraDeck)for(let e=0;e<deck.extraDeck.length;e++){lowestCardPriceRaw={name:[],rarity:[],price:[],set:[],setcode:[],id:[]};for(let t=0;t<deck.extraDeck[e].card_sets.length;t++)0!=deck.extraDeck[e].card_sets[t].set_price&&(lowestCardPriceRaw.name.push(deck.extraDeck[e].name),lowestCardPriceRaw.rarity.push(deck.extraDeck[e].card_sets[t].set_rarity),lowestCardPriceRaw.price.push(Number.parseFloat(deck.extraDeck[e].card_sets[t].set_price)),lowestCardPriceRaw.set.push(deck.extraDeck[e].card_sets[t].set_name),lowestCardPriceRaw.setcode.push(deck.extraDeck[e].card_sets[t].set_code),lowestCardPriceRaw.id.push(deck.extraDeck[e].id));deckInfo_table.innerHTML+=`\n          <tr>\n            <td data-toggle="modal" data-target="#ModalID${deck.extraDeck[e].id}">${deck.extraDeck[e].name}</td>\n            <td>rarity</td>\n            <td>setcode</td>\n            <td>$${Math.min(...lowestCardPriceRaw.price)}</td>\n          </tr>\n          \n           `,lowestPriceForDeck.extraDeck.push(Math.min(...lowestCardPriceRaw.price))}else if(e==deck.sideDeck)for(let e=0;e<deck.sideDeck.length;e++){lowestCardPriceRaw={name:[],rarity:[],price:[],set:[],setcode:[],id:[]};for(let t=0;t<deck.sideDeck[e].card_sets.length;t++)0!=deck.sideDeck[e].card_sets[t].set_price&&(lowestCardPriceRaw.name.push(deck.sideDeck[e].name),lowestCardPriceRaw.rarity.push(deck.sideDeck[e].card_sets[t].set_rarity),lowestCardPriceRaw.price.push(Number.parseFloat(deck.sideDeck[e].card_sets[t].set_price)),lowestCardPriceRaw.set.push(deck.sideDeck[e].card_sets[t].set_name),lowestCardPriceRaw.setcode.push(deck.sideDeck[e].card_sets[t].set_code),lowestCardPriceRaw.id.push(deck.sideDeck[e].id));deckInfo_table.innerHTML+=`\n          <tr>\n            <td data-toggle="modal" data-target="#ModalID${deck.sideDeck[e].id}">${deck.sideDeck[e].name}</td>\n            <td>rarity</td>\n            <td>setcode</td>\n            <td>$${Math.min(...lowestCardPriceRaw.price)}</td>\n          </tr>\n          \n           `,lowestPriceForDeck.sideDeck.push(Math.min(...lowestCardPriceRaw.price))}}function sortBy(e,t){return e.type<t.type?-1:e.type>t.type?1:0}var lowestCardPrice,mainDeckDuplicates,extraDeckDuplicates,sideDeckDuplicates,deckInfo,deckInfo_table,deck={creator:[],mainDeck:[],extraDeck:[],sideDeck:[]},rawDeck={creator:[],mainDeck:[],extraDeck:[],sideDeck:[]},lowestPriceForDeck={mainDeck:[],extraDeck:[],sideDeck:[]},highetsPriceForDeck={mainDeck:[],extraDeck:[],sideDeck:[]},lowestCardPriceRaw={name:[],rarity:[],price:[],set:[],setcode:[],id:[]};